Python 参数类型：
http://www.qiangtaoli.com/bootstrap/blog/001474192642421efbf41449b2e4a3b99e8202c54d2d8a2000

POSITIONAL_OR_KEYWORD
def foo(a): 
    pass
# 位置传参调用
foo(1)
# 关键字传参调用
foo(a=1)

VAR_POSITIONAL
def foo(*b):
    print(b)
# 不传参数不会报错，参数值是一个空元祖  
foo() # 结果是 ()
# 可以传入任意个位置参数调用
foo(1, 2.0, '3', True) #结果是 (1, 2.0, '3', True)

KEYWORD_ONLY
# VAR_POSITIONAL不需要使用时，可以匿名化
def foo(*, c):
    pass
# 只能关键字传参调用
foo(c=1)

VAR_KEYWORD
def foo(**d):
    print(d)
# 不传参数不会报错，参数值是一个空字典
foo() # 结果是 {}
# 可以传入任意个关键字参数调用
foo(a=1, b=2.0, c='3', d=True) # 结果是 {'d': True, 'c': '3', 'b': 2.0, 'a': 1}

POSITIONAL_ONLY  (历史产物，不推荐使用)

def foo(a, *b, c, **d):
# 第三个参数只能用c=0的形式来赋值

参数优先级
def foo(a, *b, c, **d):
    print(a, b, c, d, sep='\n')

foo(1, 2, '3', c=3, x=1, y=2)

# a: 1
# b: (2, '3')
# c: 3
# d: {'x': 1, 'y': 2}

默认参数

    VAR类型不允许设置默认参数
    POSITIONAL_OR_KEYWORD和KEYWORD_ONLY可以自定义默认参数，而VAR_POSITIONAL和VAR_KEYWORD不允许自定义默认参数的，因为VAR_POSITIONAL的默认参数是tuple()空元祖，而VAR_KEYWORD的默认参数是dict()空字典。如果自定义了默认参数的话，调用函数的时候可以不必传参，如果默认值是空的话，那就必须传参数才能调用。
    默认参数的位置
    POSITIONAL_OR_KEYWORD类型的默认参数一定要放在后面，否则会报错，KEYWORD_ONLY虽然没有强制要求，因为都是用关键字传参，谁先谁后都无所谓，但最好还是尽可能地放在后面吧。
    默认参数不默认？
    默认参数绝对不能设置为可变类型（比如list, dict, set），如果你在函数内改变了默认参数，下次再调用时它就不再是默认值了。

正确的示例：
def foo(p1, p2=2.0, *, k1, k2=None):
    a_list = k2 or list()
    pass

foo(1, k1='3')


切片：
L = [1,2,3,4,5,6,7,8,9]
print(L[::1])
print(L[:8:1])
print(L[-2::1])
print(L[-2::-1])
print(L[-2:0:-1])
print(L[-2:0:-2])
结果分别是： 
[1, 2, 3, 4, 5, 6, 7, 8, 9] 
[1, 2, 3, 4, 5, 6, 7, 8] 
[8, 9] 
[8, 7, 6, 5, 4, 3, 2, 1] 
[8, 7, 6, 5, 4, 3, 2] 
[8, 6, 4, 2]

迭代：
d = {'a': 1, 'b': 2, 'c': 3}
for key in d:
for value in d.values()
for k, v in d.items()
for x, y in [(1, 1), (2, 4), (3, 9)]:
for i, value in enumerate(['A', 'B', 'C']):

列表生成式：
>>>list(range(1, 11))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>>[x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
>>> [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]
>>> [m + n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> [k + '=' + v for k, v in d.items()]
['y=B', 'x=A', 'z=C']
>>> L1 = ['Hello', 'World', 18, 'Apple', None]
>>> [s.lower()for s in L1 if isinstance(s,str)]
['hello', 'world', 'apple']

生成器generator
第一种方法很简单，只要把一个列表生成式的[]改成()
g = (x * x for x in range(10))
for n in g:  #也可以用next(g)
第二种方法定义generator，
def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
    return 'done'
每次调用next()的时候执行，遇到yield语句返回，
再次执行时从上次返回的yield语句处继续执行
TODO 输出杨辉三角

迭代器
凡是可作用于for循环的对象都是Iterable类型；注意区分
凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；
可以使用isinstance()判断一个对象是否是Iterable对象
>>> isinstance((x for x in range(10)), Iterable)
True
>>> isinstance(100, Iterable)
False
生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
把list、dict、str等Iterable变成Iterator可以使用iter()函数：
>>> isinstance(iter([]), Iterator)
True
>>> isinstance(iter('abc'), Iterator)
True

for x in [1, 2, 3, 4, 5]:
    pass
等价于
# 首先获得Iterator对象:
it = iter([1, 2, 3, 4, 5])
# 循环:
while True:
    try:
        # 获得下一个值:
        x = next(it)
    except StopIteration:
        # 遇到StopIteration就退出循环
        break


